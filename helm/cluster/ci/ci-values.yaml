global:
  managementCluster: giantmc
  release:
    version: v27.0.0-alpha.1
  metadata:
    name: awesome
    organization: giantswarm
    description: "Awesome Giant Swarm cluster"
    preventDeletion: true
    labels:
      some-cluster-label: label-1
      another-cluster-label: label-2
    annotations:
      important-cluster-value: "1000"
      robots-need-this-in-the-cluster: "eW91IGNhbm5vdCByZWFkIHRoaXMsIGJ1dCByb2JvdHMgY2FuCg=="
  connectivity:
    baseDomain: example.gigantic.io
    vpcMode: private
    proxy:
      enabled: true
      httpProxy: http://proxy.giantswarm.io
      httpsProxy: https://proxy.giantswarm.io
      noProxy: "proxy1.example.com,proxy2.example.com"
  controlPlane:
    customNodeTaints:
    - key: you
      value: shall
      effect: NoExecute
    oidc:
      clientId: hello
      groupsClaim: groupsClaim
      issuerUrl: https://giantswarm.io
      usernameClaim: usernameClaim
      caPem: "..."
    replicas: 3
  nodePools:
    def00:
      replicas: 3
      labels:
        nodepool-workload-type: ai
      annotations:
        for-robots-in-nodepool: "cm9ib3RzIGFyZSBvcGVyYXRpbmcgb24gdGhpcyBub2RlIHBvb2wK"
      customNodeLabels:
      - workload-type=ai
      customNodeTaints:
      - key: supernodepool
        value: hello
        effect: NoSchedule
    verybignodepool-1234:
      replicas: 100
      customNodeLabels:
      - workload-type=robots
  components:
    containerd:
      containerRegistries:
        docker.io:
        - endpoint: registry-1.docker.io
          credentials:
            username: giantswarm
            password: super_secret_password
        - endpoint: giantswarm.azurecr.io
        private.example.io:
        - endpoint: private-example-1.azurecr.io
          identitytoken: super_secret_identity_token
        - endpoint: private-example-2.azurecr.io
          auth: c3VwZXJfc2VjcmV0X2F1dGg=
  apps:
    capiNodeLabeler:
      values:
        foo: bar
      extraConfigs:
      - name: my-secret-extra-config-1
        kind: secret
        priority: 110
      - name: my-extra-config-2
        kind: configMap
        priority: 120
    certManager:
      values:
        ingressShim:
          defaultIssuerName: encrypt-giantswarm
          defaultIssuerKind: ClusterIssuer
          defaultIssuerGroup: encrypt.giantswarm.io
        ciliumNetworkPolicy:
          enabled: false
      extraConfigs:
      - name: my-cert-manager-secret-extra-config-1
        kind: secret
        priority: 110
      - name: my-cert-manager-extra-config-2
        kind: configMap
        priority: 120
    chartOperatorExtensions:
      values:
        foo: bar
    clusterAutoscaler:
      values:
        serviceAccount:
          annotations:
            eks.amazonaws.com/role-arn: my-cluster-autoscaler-role
    coreDns:
      values:
        foo: bar
      extraConfigs:
      - name: my-coredns-extra-config
        kind: ConfigMap
        optional: false
    etcdKubernetesResourcesCountExporter:
      values:
        foo: bar
      extraConfigs:
      - name: my-etcd-k8s-res-count-exporter-extra-config
        kind: configMap
    externalDns:
      values:
        foo: bar
      extraConfigs:
      - name: my-external-dns-extra-config
        kind: configMap
        priority: 120
    metricsServer:
      values:
        foo: bar
      extraConfigs:
      - name: my-metrics-server-extra-config
        kind: configMap
    netExporter:
      values:
        foo: bar
      extraConfigs:
      - name: my-net-exporter-secret-extra-config
        kind: secret
    nodeExporter:
      values:
        foo: bar
      extraConfigs:
      - name: my-node-exporter-secret-extra-config
        kind: secret
    observabilityBundle:
      values:
        foo: bar
      extraConfigs:
      - name: my-observability-bundle-extra-config
        kind: configMap
    securityBundle:
      values:
        foo: bar
      extraConfigs:
      - name: my-security-bundle-extra-config
        kind: configMap
    teleportKubeAgent:
      values:
        foo: bar
      extraConfigs:
      - name: my-teleport-kube-agent-extra-config
        kind: configMap
    verticalPodAutoscaler:
      values:
        foo: bar
      extraConfigs:
      - name: my-vpa-extra-config
        kind: configMap
    verticalPodAutoscalerCrd:
      values:
        commonLabels:
          foo: bar
      extraConfigs:
      - name: my-vpa-crd-extra-config
        kind: ConfigMap
        optional: true
  podSecurityStandards:
    enforced: true
internal:
  advancedConfiguration:
    cgroupsv1: true
    controlPlane:
      apiServer:
        additionalAdmissionPlugins:
        - AlwaysPullImages
        auditPolicy:
          extraRules:
          - users:
            - system:unsecured
            verbs:
            - get
            resources:
            - group: ""
              resources:
              - configmaps
            namespaces:
            - kube-system
            level: Request
        bindPort: 6443
        etcdPrefix: giantswarm.io
        extraArgs:
          allow-privileged: false
          authorization-webhook-version: v1beta1
          delete-collection-workers: 2
          min-request-timeout: 600
        extraCertificateSANs:
        - this-is-extra-cert-san.giantswarm.io
        - another-extra-cert-san.giantswarm.io
        featureGates:
        - name: StatefulSetAutoDeletePVC
          enabled: true
      controllerManager:
        featureGates:
        - name: StatefulSetAutoDeletePVC
          enabled: true
      etcd:
        quotaBackendBytesGiB: 16
        initialCluster: "default=http://localhost:2380"
        initialClusterState: "existing"
        extraArgs:
          max-snapshots: 3
          snapshot-count: 50000
        experimental:
          peerSkipClientSanVerification: true
      files:
      - path: /etc/custom/control-plane/node/file.yaml
        permissions: "0644"
        contentFrom:
          secret:
            name: cluster-super-secret-control-plane
            key: node-stuff
      preKubeadmCommands:
      - echo "custom control plane command before kubeadm"
      postKubeadmCommands:
      - echo "custom control plane command after kubeadm"
    files:
    - path: /etc/custom/node/file.yaml
      permissions: "0644"
      contentFrom:
        secret:
          name: cluster-super-secret
          key: node-stuff
    preKubeadmCommands:
    - echo "custom nodes command before kubeadm"
    postKubeadmCommands:
    - echo "custom nodes command after kubeadm"
    workers:
      files:
      - path: /etc/custom/worker/node/file.yaml
        permissions: "0644"
        contentFrom:
          secret:
            name: cluster-super-secret-worker
            key: node-stuff
      preKubeadmCommands:
      - echo "custom workers command before kubeadm"
      postKubeadmCommands:
      - echo "custom workers command after kubeadm"
    kubelet:
      systemReserved:
        cpu: 250m
        memory: 1280Mi
        ephemeralStorage: 1024Mi
      kubeReserved:
        cpu: 350m
        memory: 384Mi
      containerLogMaxSize: 30Mi
      containerLogMaxFiles: 2
  ephemeralConfiguration:
    apps:
      certExporter:
        disable: false
      certManager:
        disable: false
        catalogOverride: default-test
      cilium:
        catalogOverride: default-test
        versionOverride: 100.100.100-dev.fb431b464a9713
      chartOperatorExtensions:
        catalogOverride: default-test
        versionOverride: v100.0.0-dev.8234y65dh92783
    offlineTesting:
      renderWithoutReleaseResource: true
providerIntegration:
  apps:
    capiNodeLabeler:
      enable: true
    certExporter:
      enable: true
      configTemplateName: cluster.test.providerIntegration.apps.certExporter.config
    certManager:
      enable: true
    chartOperatorExtensions:
      enable: true
    cilium:
      enable: true
    ciliumServiceMonitors:
      enable: true
    clusterAutoscaler:
      enable: true
    coreDns:
      enable: true
    etcdKubernetesResourcesCountExporter:
      enable: true
    externalDns:
      enable: true
      configTemplateName: cluster.test.providerIntegration.apps.externalDns.config
    k8sAuditMetrics:
      enable: true
    k8sDnsNodeCache:
      enable: true
    metricsServer:
      enable: true
    netExporter:
      enable: true
    networkPolicies:
      enable: true
    nodeExporter:
      enable: true
    observabilityBundle:
      enable: true
    prometheusBlackboxExporter:
      enable: true
    securityBundle:
      enable: true
    teleportKubeAgent:
      enable: true
    verticalPodAutoscaler:
      enable: true
    verticalPodAutoscalerCrd:
      enable: true
  environmentVariables:
    hostName: COREOS_EC2_HOSTNAME
    ipv4: COREOS_EC2_IPV4_LOCAL
  provider: aws
  bastion:
    kubeadmConfig:
      ignition:
        containerLinuxConfig:
          additionalConfig:
            systemd:
              units:
              - name: example1-bastion.service
                enabled: false
                mask: false
                contents:
                  unit:
                    description: "Bastion example 1"
                dropins:
                - name: hello-bastion.conf
                  contents: |
                    # Contents goes here
      preKubeadmCommands:
      - sleep infinity
  clusterAnnotationsTemplateName: "cluster.test.providerIntegration.connectivity.annotations"
  connectivity:
    proxy:
      noProxy:
        value:
        - elb.amazonaws.com
        - 169.254.169.254
        templateName: "cluster.test.internal.kubeadm.proxy.anotherNoProxyList"
  controlPlane:
    kubeadmConfig:
      clusterConfiguration:
        apiServer:
          additionalAdmissionPlugins:
          - AlwaysPullImages
          apiAudiences:
            templateName: "cluster.test.kubeadmControlPlane.kubeadmConfigSpec.clusterConfiguration.apiServer.apiAudiences"
          featureGates:
          - name: DownwardAPIHugePages
            enabled: false
          serviceAccountIssuers:
            - clusterDomainPrefix: irsa
            - url: http://secondary.issuer.example.org
      files:
      - path: /etc/aws/control-plane/node/file.yaml
        permissions: "0644"
        contentFrom:
          secret:
            name: cluster-super-secret-control-plane
            key: node-stuff
      ignition:
        containerLinuxConfig:
          additionalConfig:
            systemd:
              units:
              - name: var-lib-etcd.mount
                enabled: true
                mask: false
                contents:
                  unit:
                    description: etcd volume
                    defaultDependencies: false
                  install:
                    wantedBy:
                    - local-fs-pre.target
                  mount:
                    what: /dev/disk/by-label/etcd
                    where: /var/lib/etcd
                    type: xfs
              - name: example2-control-plane.service
                enabled: false
                mask: false
                dropins:
                - name: hello1-control-plane.conf
                  contents: |
                    # Multi-line
                    # contents goes here
                - name: hello2-control-plane.conf
                  contents: |
                    # Multi-line
                    # contents goes here
            storage:
              filesystems:
              - name: etcd
                mount:
                  device: /dev/xvdc
                  wipeFilesystem: true
                  label: etcd
                  format: xfs
              - name: containerd
                mount:
                  device: /dev/xvdd
                  wipeFilesystem: true
                  label: containerd
                  format: xfs
              - name: kubelet
                mount:
                  device: /dev/xvde
                  wipeFilesystem: true
                  label: kubelet
                  format: xfs
              directories:
              - path: /var/lib/kubelet/temporary/stuff/control-plane
                overwrite: true
                filesystem: kubelet
                mode: 750
                user:
                  id: 12345
                  name: giantswarm
                group:
                  id: 23456
                  name: giantswarm
      preKubeadmCommands:
      - echo "aws control plane command before kubeadm"
      postKubeadmCommands:
      - echo "aws control plane command after kubeadm"
    resources:
      infrastructureMachineTemplate:
        group: infrastructure.cluster.x-k8s.io
        version: v1beta1
        kind: AWSMachineTemplate
      infrastructureMachineTemplateSpecTemplateName: "cluster.internal.test.controlPlane.machineTemplate.spec"
  components:
    systemd:
      timesyncd:
        ntp:
        - 169.254.169.123
  hashSalt: salty-1
  kubeadmConfig:
    files:
    - path: /etc/aws/node/file.yaml
      permissions: "0644"
      contentFrom:
        secret:
          name: cluster-super-secret
          key: node-stuff
    ignition:
      containerLinuxConfig:
        additionalConfig:
          systemd:
            units:
            - name: var-lib-kubelet.mount
              enabled: true
              mask: false
              contents:
                unit:
                  description: kubelet volume
                  defaultDependencies: false
                install:
                  wantedBy:
                  - local-fs-pre.target
                mount:
                  what: /dev/disk/by-label/kubelet
                  where: /var/lib/kubelet
                  type: xfs
            - name: var-lib-containerd.mount
              enabled: true
              mask: false
              contents:
                unit:
                  description: containerd volume
                  defaultDependencies: false
                install:
                  wantedBy:
                  - local-fs-pre.target
                mount:
                  what: /dev/disk/by-label/containerd
                  where: /var/lib/containerd
                  type: xfs
            - name: example2.service
              enabled: false
              mask: false
              dropins:
              - name: hello1.conf
                contents: |
                  # Multi-line
                  # contents goes here
              - name: hello2.conf
                contents: |
                  # Multi-line
                  # contents goes here
          storage:
            directories:
            - path: /var/lib/kubelet/temporary/stuff
              overwrite: true
              filesystem: kubelet
              mode: 750
              user:
                id: 12345
                name: giantswarm
              group:
                id: 23456
                name: giantswarm
    preKubeadmCommands:
    - echo "aws nodes command before kubeadm"
    postKubeadmCommands:
    - echo "aws nodes command after kubeadm"
  kubernetesVersion: 1.25.16
  pauseProperties:
    global.connectivity.vpcMode: private
  osImage:
    toolingVersion: 1.2.3
  resourcesApi:
    clusterResourceEnabled: true
    controlPlaneResourceEnabled: true
    machinePoolResourcesEnabled: true
    machineHealthCheckResourceEnabled: true
    bastionResourceEnabled: true
    infrastructureCluster:
      group: infrastructure.cluster.x-k8s.io
      version: v1beta1
      kind: AWSCluster
    nodePoolKind: MachinePool
    infrastructureMachinePool:
      group: infrastructure.cluster.x-k8s.io
      version: v1beta1
      kind: AWSMachinePool
    helmRepositoryResourcesEnabled: true
    bastion:
      infrastructureMachineTemplate:
        group: infrastructure.cluster.x-k8s.io
        version: v1beta1
        kind: AWSMachineTemplate
      infrastructureMachineTemplateSpecTemplateName: "cluster.test.bastion.machineTemplate.spec"
  teleport:
    enabled: true
  workers:
    defaultNodePools:
      def00:
        customNodeLabels:
        - label=default
        maxSize: 3
        minSize: 3
    kubeadmConfig:
      files:
      - path: /etc/aws/worker/node/file.yaml
        permissions: "0644"
        contentFrom:
          secret:
            name: cluster-super-secret-worker
            key: node-stuff
      ignition:
        containerLinuxConfig:
          additionalConfig:
            systemd:
              units:
              - name: var-lib-workload.mount
                enabled: true
                mask: false
                contents:
                  unit:
                    description: workload volume
                    defaultDependencies: false
                  install:
                    wantedBy:
                    - local-fs-pre.target
                  mount:
                    what: /dev/disk/by-label/workload
                    where: /var/lib/workload
                    type: xfs
              - name: example2-workers.service
                enabled: false
                mask: false
                dropins:
                - name: hello1-workers.conf
                  contents: |
                    # Multi-line
                    # contents goes here
                - name: hello2-workers.conf
                  contents: |
                    # Multi-line
                    # contents goes here
            storage:
              directories:
              - path: /var/lib/kubelet/temporary/stuff/workers
                overwrite: true
                filesystem: kubelet
                mode: 750
                user:
                  id: 12345
                  name: giantswarm
                group:
                  id: 23456
                  name: giantswarm
      preKubeadmCommands:
      - echo "aws workers command before kubeadm"
      postKubeadmCommands:
      - echo "aws workers command after kubeadm"
  useReleases: true
