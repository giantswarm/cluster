{{- if .Values.providerIntegration.resourcesApi.cleanupHelmReleaseResourcesEnabled }}
#
# Because cluster resources are often deleted before Flux has a chance to uninstall the Helm releases for all deleted HelmRelease CRs,
# they become leftovers because there is still a Flux finalizer on them.
#
# This looks as follows:
#
#     $ kubectl get helmreleases --namespace org-multi-project
#     NAME                           AGE     READY   STATUS
#     pawe1-cilium                   99m     False   failed to get last release revision
#     pawe1-cloud-provider-vsphere   99m     False   failed to get last release revision
#
# Both HelmRelease CRs in this case have a deletion timestamp and finalizer set, e.g.:
#
#     deletionTimestamp: "2023-03-02T14:34:49Z"
#     finalizers:
#     - finalizers.fluxcd.io
#
# To work around this, this post-delete hook suspends all HelmRelease CRs created with this chart.
#
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "cluster.resource.name" . }}-helmreleases-cleanup
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "0"
  labels:
    {{- include "cluster.labels.common.all" . | nindent 4 }}
spec:
  ttlSecondsAfterFinished: 86400 # 24h
  template:
    metadata:
      labels:
        {{- include "cluster.labels.common.all" . | nindent 8 }}
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "cluster.resource.name" . }}-helmreleases-cleanup
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: post-delete-job
        image: {{ .Values.internal.advancedConfiguration.registry }}/giantswarm/kubectl:{{ .Values.providerIntegration.kubernetesVersion }}
        command:
          - /bin/sh
          - "-xc"
          - |
            for r in $(kubectl get helmrelease -n {{ .Release.Namespace }} -l "giantswarm.io/cluster={{ include "cluster.resource.name" . }}" -o name) ; do
                kubectl patch -n {{ .Release.Namespace }} helmchart $(kubectl get -n {{ .Release.Namespace }} "${r}" -o jsonpath='{.status.helmChart}' | cut -d/ -f2) --type=merge -p '{"metadata": {"finalizers": []}}'
                kubectl patch -n {{ .Release.Namespace }} "${r}" --type=merge -p '{"metadata": {"finalizers": []}}'
            done
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
          readOnlyRootFilesystem: true
        resources:
          requests:
            cpu: 10m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 256Mi
{{- end }}
