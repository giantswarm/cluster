{{ $rootScope := .}}
{{- range $path, $_ :=  .Files.Glob "files/apps/**.yaml" }}
{{- $app := dict }}
{{- with $rootScope }}
{{- $app = .Files.Get $path | fromYaml }}
{{- $appName := $app.appName }}
{{- $appKey := $app.configKey }}
{{- $internalConfig := dict }}
{{- if ($.Values.internal.advancedConfiguration).apps }}
{{- $internalConfigRaw := get $.Values.internal.advancedConfiguration.apps $appKey }}
{{- if $internalConfigRaw }}
{{- /* Sometimes, when internal config is not set, $internalConfigRaw gets parsed as an empty string,
       and sometimes as an empty dict. And we want $internalConfig, which is used in template, to be
       always a dict, for the sake of cleaner template code. */}}
{{- $internalConfig = $internalConfigRaw }}
{{- end }}
{{- end }}
{{- if not $internalConfig.disabled }}
---
apiVersion: application.giantswarm.io/v1alpha1
kind: App
metadata:
  {{- $annotations := include "cluster.annotations.common.all" $ }}
  {{- if or $annotations $app.dependsOn }}
  annotations:
    {{- if $annotations }}
    {{- $annotations | indent 4 }}
    {{- end }}
    {{- if $app.dependsOn }}
    # app-operator will make sure that the app on which it depends is installed before
    app-operator.giantswarm.io/depends-on: {{ printf "%s-%s" $.Values.global.metadata.name $app.dependsOn -}}
    {{- end }}
  {{- end }}
  labels:
    {{- include "cluster.labels.common.all" $ | indent 4 }}
    {{- if $app.inCluster }}
    app-operator.giantswarm.io/version: 0.0.0
    {{- end }}
  name: {{ $.Values.global.metadata.name }}-{{ $app.appName }}
  namespace: {{ $.Release.Namespace }}
spec:
  catalog: {{ $internalConfig.catalogOverride | default $app.catalog }}
  name: {{ $app.chartName }}
  {{- if $app.inCluster }}
  namespace: {{ $.Release.Namespace }}
  kubeConfig:
    inCluster: true
  {{- else }}
  namespace: {{ $app.namespace }}
  kubeConfig:
    context:
      name: {{ $.Values.global.metadata.name }}-admin@{{ $.Values.global.metadata.name }}
    inCluster: false
    secret:
      name: {{ $.Values.global.metadata.name }}-kubeconfig
      namespace: {{ $.Release.Namespace}}
  {{- end }}
  version: {{ $app.version }}
  {{- if or ($app.clusterValues).configMap ($app.clusterValues).secret }}
  config:
  {{- if ($app.clusterValues).configMap }}
    configMap:
      name: {{ $.Values.global.metadata.name }}-cluster-values
      namespace: {{ $.Release.Namespace }}
  {{- end }}
  {{- if ($app.clusterValues).secret }}
    secret:
      name: {{ $.Values.global.metadata.name }}-cluster-values
      namespace: {{ $.Release.Namespace }}
  {{- end }}
  {{- end }}
  {{- $userConfig := dict }}
  {{- $userConfigRaw := get $.Values.global.apps $appKey }}
  {{- if $userConfigRaw }}
  {{- $userConfig = $userConfigRaw | toYaml | toString | fromYaml }}
  {{- end }}
  {{- if or $app.extraConfigs $userConfig.extraConfigs }}
  extraConfigs:
  {{- /* Render pre-defined extra configs*/}}
  {{- range $extraConfig := $app.extraConfigs }}
  - kind: {{ $extraConfig.kind }}
    name: {{ tpl $extraConfig.name $ }}
    namespace: {{ tpl $extraConfig.namespace $ }}
    {{- if $extraConfig.priority }}
    priority: {{ $extraConfig.priority }}
    {{- end}}
  {{- end }}
  {{- /* Render user's extra configs*/}}
  {{- range $extraConfig := $userConfig.extraConfigs }}
    - kind: {{ $extraConfig.kind }}
      name: {{ $extraConfig.name }}
      namespace: {{ $.Release.Namespace }}
      {{- if $extraConfig.priority }}
      priority: {{ $extraConfig.priority }}
      {{- end}}
    {{- end }}
  {{- end }}
  {{- $hasUserValues := or $userConfig.values $app.defaultValues }}
  {{- if $hasUserValues }}
  userConfig:
    configMap:
      name: {{ $.Values.global.metadata.name }}-{{ $appName }}-user-values
      namespace: {{ $.Release.Namespace }}
  {{- end }}
{{- if $hasUserValues }}
{{- $userValues := dict }}
{{- if $app.defaultValues }}
{{- $userValues = tpl ($app.defaultValues | toYaml | toString) $ | fromYaml }}
{{- end }}
{{- if ($userConfig).values }}
{{- $userValues = mergeOverwrite $userValues (deepCopy $userConfig.values) }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "cluster.labels.common.all" $ | nindent 4 }}
  name: {{ $.Values.global.metadata.name }}-{{ $appName }}-user-values
  namespace: {{ $.Release.Namespace }}
data:
  values: |
  {{- (tpl ($userValues | toYaml | toString) $) | nindent 4 }}
{{- /*end if $hasUserValues*/}}
{{- end }}

{{- /* end if not $internalConfig.disabled*/}}
{{- end }}
{{- /* end with $rootScope */}}
{{- end }}
{{- /* end outer range */}}
{{- end }}
