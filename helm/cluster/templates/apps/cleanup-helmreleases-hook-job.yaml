{{- if $.Values.providerIntegration.resourcesApi.cleanupHelmReleaseResourceEnabled }}
# Because cluster provider resources are often deleted before flux has a chance
# to uninstall helm releases for all deleted HelmRelease CRs they become
# leftovers because there is still flux finalizer on them. This looks like
# following:
#
#     $ kubectl get helmrelease -n org-multi-project
#     NAME                           AGE     READY   STATUS
#     pawe1-cilium                   99m     False   failed to get last release revision
#     pawe1-cloud-provider-vsphere   99m     False   failed to get last release revision
#
# Both HelmRelease CRs in this case have deletionTimestamp and finalizers set,
# e.g.:
#
#     deletionTimestamp: "2023-03-02T14:34:49Z"
#     finalizers:
#       - finalizers.fluxcd.io
#
# To work around this, post-delete Job deletes all finalizers on all HelmRelease
# CRs created with this chart.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "{{ include "cluster.resource.name" $ }}-cleanup-helmreleases-hook"
  namespace: {{ $.Release.Namespace }}
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "-1"
  labels:
    {{- include "cluster.labels.common.all" $ | nindent 4 }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "{{ include "cluster.resource.name" $ }}-cleanup-helmreleases-hook"
  namespace: {{ $.Release.Namespace }}
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "-1"
  labels:
    {{- include "cluster.labels.common.all" $ | nindent 4 }}
rules:
  - apiGroups: ["helm.toolkit.fluxcd.io"]
    resources: ["helmreleases"]
    verbs: ["get", "list", patch"]
  - apiGroups: ["source.toolkit.fluxcd.io"]
    resources: ["helmcharts"]
    verbs: ["get", "list", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "{{ include "cluster.resource.name" $ }}-cleanup-helmreleases-hook"
  namespace: {{ $.Release.Namespace }}
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "-1"
  labels:
    {{- include "cluster.labels.common.all" $ | nindent 4 }}
subjects:
  - kind: ServiceAccount
    name: "{{ include "cluster.resource.name" $ }}-cleanup-helmreleases-hook"
    namespace: {{ $.Release.Namespace }}
roleRef:
  kind: Role
  name: "{{ include "cluster.resource.name" $ }}-cleanup-helmreleases-hook"
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "cluster.resource.name" $ }}-cleanup-helmreleases-hook"
  namespace: {{ $.Release.Namespace }}
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook-weight": "0"
  labels:
    {{- include "cluster.labels.common.all" $ | nindent 4 }}
spec:
  ttlSecondsAfterFinished: 86400 # 24h
  template:
    metadata:
      name: "{{ include "cluster.resource.name" $ }}-cleanup-helmreleases-hook"
      namespace: {{ $.Release.Namespace }}
      labels:
        {{- include "cluster.labels.common.all" $ | nindent 8 }}
    spec:
      restartPolicy: Never
      serviceAccountName: "{{ include "cluster.resource.name" $ }}-cleanup-helmreleases-hook"
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: post-delete-job
          image: "{{ .Values.internal.advancedConfiguration.registry }}/giantswarm/kubectl:{{ .Values.providerIntegration.kubernetesVersion }}"
          command:
            - "/bin/sh"
            - "-xc"
            - |
              for r in $(kubectl get helmrelease -n {{ .Release.Namespace }} -l "giantswarm.io/cluster={{ include "cluster.resource.name" . }}" -o name) ; do
                  kubectl patch -n {{ .Release.Namespace }} helmchart $(kubectl get -n {{ .Release.Namespace }} "${r}" -o jsonpath='{.status.helmChart}' | cut -d/ -f2) --type=merge -p '{"metadata": {"finalizers": []}}'
                  kubectl patch -n {{ .Release.Namespace }} "${r}" --type=merge -p '{"metadata": {"finalizers": []}}'
              done
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
            readOnlyRootFilesystem: true
          resources:
            requests:
              memory: "64Mi"
              cpu: "10m"
            limits:
              memory: "256Mi"
              cpu: "100m"
{{- end }}
