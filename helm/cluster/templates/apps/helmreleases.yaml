{{- $rootScope := . }}

{{- range $path, $_ := .Files.Glob "files/helmreleases/**.yaml" }}

{{- $app := dict }}
{{- with $rootScope }}

{{- /* Configure App values */}}
{{- $app := tpl (.Files.Get $path) $ | fromYaml }}
{{- $appName := $app.appName }}
{{- $_ := set $ "appName" $appName }}
{{- $appKey := $app.configKey | default $appName }}

{{- /*
    Get provider-specific app config where we have:
    - name of Helm template that renders provider-specific Helm values for the app
    - flag that indicates if the app is enabled for the provider
*/}}
{{- $providerIntegrationAppConfig := dict }}
{{- $providerIntegrationAppConfigRaw := get $.Values.providerIntegration.apps $appKey }}
{{- if $providerIntegrationAppConfigRaw }}
{{- /* Sometimes, when provider app config is not set, $providerIntegrationAppConfigRaw gets parsed as an empty string,
       and sometimes as an empty dict. And we want $providerIntegrationAppConfigRaw, which is used in template, to be
       always a dict, for the sake of cleaner template code.
*/}}
{{- $providerIntegrationAppConfig = $providerIntegrationAppConfigRaw }}
{{- end }}

{{- /*
    Get (optional) ephemeral app config where we have:
    - flag that indicates if the app is enabled or not
    - version override
    - catalog override
*/}}
{{- $ephemeralConfig := dict }}
{{- if ($.Values.internal.ephemeralConfiguration).apps }}
{{- $ephemeralConfigRaw := get $.Values.internal.ephemeralConfiguration.apps $appKey }}
{{- if $ephemeralConfigRaw }}
{{- /* Sometimes, when ephemeral config is not set, $ephemeralConfigRaw gets parsed as an empty string,
       and sometimes as an empty dict. And we want $ephemeralConfig, which is used in template, to be
       always a dict, for the sake of cleaner template code.
*/}}
{{- $ephemeralConfig = $ephemeralConfigRaw }}
{{- end }}
{{- end }}

{{- /* Determine if the App CR should be rendered or not */}}
{{- /* Cluster chart */}}
{{- $shouldRenderApp := not (or $app.disable $ephemeralConfig.disable) }}
{{- /* Provider chart */}}
{{- $shouldRenderApp = and $shouldRenderApp $providerIntegrationAppConfig.enable }}
{{- /* Releases */}}
{{- $shouldRenderApp = and $shouldRenderApp (or (not $.Values.providerIntegration.useReleases) (include "cluster.app.in-release" $)) }}

{{- if $shouldRenderApp }}
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: {{ include "cluster.resource.name" $ }}-{{ $appName }}
  namespace: {{ $.Release.Namespace }}
  {{- $annotations := include "cluster.annotations.common.all" $ }}
  {{- if $annotations }}
  annotations:
    {{- $annotations | indent 4 }}
  {{- end }}
  labels:
    {{- include "cluster.labels.common.all" $ | nindent 4 }}
spec:
  releaseName: {{ $appName }}
  targetNamespace: {{ $app.namespace }}
  storageNamespace: {{ $app.namespace }}
  chart:
    spec:
      chart: {{ $app.chartName | default $app.appName }}
      {{- $appCatalog := $app.catalog -}}
      {{- $appVersion := $app.version -}}
      {{- if $.Values.providerIntegration.useReleases }}
      {{- $appCatalog = include "cluster.app.catalog" $ }}
      {{- $appVersion = include "cluster.app.version" $ }}
      {{- end }}
      version: {{ $ephemeralConfig.versionOverride | default $appVersion }}
      sourceRef:
        kind: HelmRepository
        name: {{ include "cluster.resource.name" $ }}-{{ $ephemeralConfig.catalogOverride | default $appCatalog | default "default" }}
  {{- $dependencies := list }}
  {{- if $.Values.providerIntegration.useReleases}}
    {{- $dependenciesFromRelease := include "cluster.app.dependencies" $ | fromYamlArray }}
    {{- range $_, $dependency := $dependenciesFromRelease }}
      {{- $dependencies = append $dependencies $dependency }}
    {{- end }}
  {{- else if $app.dependsOn }}
    {{- $dependencies = $app.dependsOn }}
  {{- end }}
  {{- if $dependencies }}
  dependsOn:
  {{- range $_, $dependency := $dependencies }}
  - name: {{ include "cluster.resource.name" $ }}-{{ $dependency }}
    namespace: {{ $.Release.Namespace }}
  {{- end }}
  {{- end }}
  kubeConfig:
    secretRef:
      name: {{ include "cluster.resource.name" $ }}-kubeconfig
  interval: {{ $app.interval | default "5m" }}
  timeout: {{ $app.timeout | default "5m" }}
  install:
    remediation:
      {{- if hasKey $app "remediationRetries" }}
      retries: {{ $app.remediationRetries }}
      {{- else }}
      retries: -1
      {{- end }}
  upgrade:
    disableWait: {{ $app.disableWait | default false }}
    remediation:
      {{- if hasKey $app "remediationRetries" }}
      retries: {{ $app.remediationRetries }}
      {{- else }}
      retries: -1
      {{- end }}
  {{- /* We have multiple layers of app Helm values, where every next layer overwrites the previous one. */}}
  {{- /* Layer 1: default provider-independent app Helm values */}}
  {{- $appHelmValues := $app.defaultValues | default dict -}}
  {{- /* Layer 2: default provider-specific Helm values */}}
  {{- if $providerIntegrationAppConfig.configTemplateName }}
  {{- $providerSpecificDefaultValues := (include $providerIntegrationAppConfig.configTemplateName $) | fromYaml -}}
  {{- $appHelmValues = mergeOverwrite $appHelmValues $providerSpecificDefaultValues -}}
  {{- end }}
  {{- /* Layer 3: custom user config */}}
  {{- $userConfig := dict }}
  {{- $userConfigRaw := get $.Values.global.apps $appKey }}
  {{- if $userConfigRaw }}
  {{- $userConfig = $userConfigRaw | toYaml | toString | fromYaml }}
  {{- end }}
  {{- if $userConfig.values }}
  {{- $appHelmValues = mergeOverwrite $appHelmValues (deepCopy $userConfig.values) -}}
  {{- end }}
  {{- if $appHelmValues }}
  values: {{- $appHelmValues | toYaml | nindent 4 }}
  {{- end }}
  {{- $extraConfigs := concat ($app.extraConfigs | default list) ($userConfig.extraConfigs | default list) }}
  {{- if $extraConfigs }}
  valuesFrom:
    {{- range $extraConfig := $extraConfigs }}
  - kind: {{ $extraConfig.kind }}
    name: {{ $extraConfig.name }}
    valuesKey: values
    optional: {{ $extraConfig.optional | default false  }}
    {{- end }}
  {{- end }}
{{- /* end if $shouldRenderApp */}}
{{- end }}
{{- /* end with $rootScope */}}
{{- end }}
{{- /* end outer range */}}
{{- end }}
